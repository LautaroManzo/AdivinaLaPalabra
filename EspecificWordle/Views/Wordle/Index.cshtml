@using EspecificWordle.Models

@model WordleViewModel

<script>
    const instruccionesUrl = '@Url.Action("Instrucciones", "Wordle")';
</script>

<script>

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/refreshHub")
        .configureLogging(signalR.LogLevel.None)
        .build();

    connection.on("RefreshPage", function () {
        location.reload();
    });

    connection.start().catch(function (err) {
        console.error(err.toString());
    });

</script>

<script type="text/javascript">

    let abcRegex = /^[a-zA-Z]+$/;   // Expresión regular para letras de la A-Z (mayúsculas y minúsculas)
    var data;
    let inputFocus;
    let filaFocus;
    
    $(document).ready(function () {

        // Habilita la fila que se esta usando segun el numero de intento.
        $('.divWordle').children().each(function (index) {
            if (index === (@Model.Intentos - 0)) {
                $(this).removeClass('div-disable');
                filaFocus = $(this);    // Foco de la fila
            }
        });

        // Guardo en todo momento el input que tiene focus
        $(document).on('focus', '.divWordle > div:not(.div-disable) input', function () {
            
            if (inputFocus)
                inputFocus.removeClass("foco");

            inputFocus = $(this);
            inputFocus.addClass("foco");
        });

        // 200 milisegundos para que haga enfoque en el primer input
        setTimeout(function () {

            if ('@Model.Intentos' == 0)
                inputFocus = filaFocus.find("input").first().focus();
            else
                loadPage(); // Falta analizar si esta función iría acá
                
        }, 200);
        
    });

    function loadPage() {
        let json = '@Html.Raw(Model.JuegoDictionaryJson)';
        let data = "";

        if (json) {
            data = JSON.parse(json);
            let intentos = data["1"].length;

            $(".divWordle").children("div").slice(0, intentos).each(function (index) {

                // Piso la variable en cada recorrido
                filaFocus = $(this);

                let dictionary = data["1"];   // "1" es el modo de juego
                let obj = dictionary[index];
                let list = obj.Letters;
                
                // Elementos html
                let fila = $(this);
                let filaDivs = fila.children("div");

                filaDivs.each(function (indexInp) {
                    
                    // Actualiza valores del input
                    let input = $(this).children("input");
                    input.val(list[indexInp].Letra);

                    // Actualiza el aspecto de inputs
                    if (list[indexInp].Color == "Verde")
                        changeInputAndButton(indexInp, list[indexInp].Letra, "input-success", "button-success", undefined, undefined);
                    else if (list[indexInp].Color == "Amarillo")
                        changeInputAndButton(indexInp, list[indexInp].Letra, "input-medium", "button-medium", undefined, undefined);
                    else
                        changeInputAndButton(indexInp, list[indexInp].Letra, "input-grey", "button-grey", undefined, undefined);
                });

                if ($("#GameFinish").val() == "@true") {
                    filaFocus.next().addClass('div-disable');
                }
                else 
                {
                    // Se hace foco en la fila que corresponde
                    filaFocus.next("div").removeClass('div-disable'); // Se saca la class en el div siguiente
                    filaFocus.addClass('div-disable');  // Se agrega la class en el div donde se ingresó la palabra
                    filaFocus = filaFocus.next("div");  // Se cambia la fila que tiene el foco
                    filaFocus.find("input").first().focus();  // Se da el foco al input de la fila siguiente
                }

            });

        }

    }

</script>

@Html.HiddenFor(x => x.Intentos)
@Html.HiddenFor(x => x.Length)
@Html.HiddenFor(x => x.ModoId)
@Html.HiddenFor(x => x.PalabraIngresada)
@Html.HiddenFor(x => x.Juego)
@Html.HiddenFor(x => x.JuegoDictionaryJson)
@Html.HiddenFor(x => x.Resultado)
@Html.HiddenFor(x => x.GameFinish)

<div class="divConteiener">

    @await Html.PartialAsync("Navbar")

    <div class="divWordle">
        @for (int i = 0; i < 5; i++)    // FILAS
        {
            <div class="fila div-disable">
                @for (int j = 0; j < Model.Length; j++)  // COLUMNAS
                {
                    <div>
                        <input name="@($"{i}_{j}")" type="text" class="form-control form-control-lg input" autocomplete="off" role="presentation"
                               maxlength="1" oninput="this.value = this.value.toUpperCase()" />
                    </div>
                }
            </div>
        }
    </div>

    @await Html.PartialAsync("Keyboard")

</div>
